###  THESE DIRECTORIES NEED TO BE SET FOR YOUR SYSTEM ###
# note the MATERIAL_DIRECTORY and CABLE_DIRECTORY paths are used in the sed command and
# require the usual '/' to be replaced by '\/' to avoid problems with sed 
#
# May 2013: SED COMMANDS NOW GENERATED AUTOMATICALLY...
#
#MATERIAL_DIRECTORY="\/home\/chris\/SOFTWARE\/GGI_TLM\/GGI_TLM\/TEST_DATA\/MATERIAL_DATA"
#CABLE_DIRECTORY="\/home\/chris\/SOFTWARE\/GGI_TLM\/GGI_TLM\/TEST_DATA\/CABLE_DATA"
#
### NOTHING BELOW HERE SHOULD NEED TO BE CHANGED ###

# These definitions fixed by IFlintoft for Ubuntu 14.04LTS 3/11/2014 see issues on github website
#MATERIAL_DIRECTORY_STRING="${TEST_DATA_DIRECTORY}/MATERIAL_DATA"
#MATERIAL_DIRECTORY="${MATERIAL_DIRECTORY_STRING//\//\/}"
#
#CABLE_DIRECTORY_STRING="${TEST_DATA_DIRECTORY}/CABLE_DATA"
#CABLE_DIRECTORY="${CABLE_DIRECTORY_STRING//\//\/}"

MATERIAL_DIRECTORY_STRING="${TEST_DATA_DIRECTORY}/MATERIAL_DATA"
MATERIAL_DIRECTORY="${MATERIAL_DIRECTORY_STRING//\//\\/}"

CABLE_DIRECTORY_STRING="${TEST_DATA_DIRECTORY}/CABLE_DATA"
CABLE_DIRECTORY="${CABLE_DIRECTORY_STRING//\//\\/}"


echo " "
echo "Automatic testing of GGI_TLM"
echo " "

CLEANING_LIST="\
progress \
sed_command \
sed_command2 \
GGI_TLM_memory_usage.txt \
*.dat \
*.pvsm \
*.plt \
*vtk* \
*.txt \
*.info \
*.jpeg \
*.png \
*.fout* \
*.tout* \
*.vmat* \
*.smat* \
*.cable \
*.cir \
*.mode \
*.fd_* \
*.fdmat \
*.jpg \
*.msh \
*.stl \
*.avi \
*.info \
*fd_* \
IELF_value.out \
fort.* \
save_result \
"

 
if [ "$#" = "0" ] ; then

  echo "Run using the following form:"
  echo " "
  echo "run_automatic_test action"
  echo " "
  echo "action is the process to run:"
  echo "action=run_seq NAME       : run GGI_TLM_SEQ on the test case NAME sequentially then post process results"
  echo "action=run_mpi np NAME    : run GGI_TLM_MPI on the test case NAME using mpi on np processors then post process results"
  echo "action=post_process NAME  : post process results"
  echo "action=clean NAME         : remove all existing results"
  echo "action=clean_vtk NAME     : remove all vtk files "
  echo "action=clean_all NAME     : remove all existing results and saved results"
  echo "action=plot NAME          : plot the results to screen"
  echo "action=plot_jpg NAME      : plot the results to jpeg file"
  echo "action=plot_ref NAME      : plot the results against reference results to screen"
  echo "action=plot_ref_jpg NAME  : plot the results against reference results to jpeg file"
  echo "action=reference  NAME    : update the reference results with the current set of results"
  echo "action=check_reference  NAME    : Check the reference results against the current set of results to see whether they are the same"
  echo "action=view_geometry  NAME     : View the geometry; volumes, surfaces, lines and points"
  echo "action=view_meshed_geometry  NAME     : View the meshed geometry; volumes, surfaces, lines and points"
  echo "action=view_mesh  NAME     : View the computational mesh; volume materials, surface materials and cables"
  echo "action=document  NAME     : Create a document in rtf format with details of the problem i.e. geometry, materials, cables, mesh and results"
  echo "action=save  NAME  TAG   : Create a directory RESULTS_TAG and save results, .inp file, .info file and any .rtf files into it."
  echo "action=set_permissions  NAME  : Set executable permissions on run_automatic_test and create_reference_restuls files"
  echo " "
  echo "NAME can be one of the existing test cases or leave blank to run the whole set"
  echo " "
  echo "Existing test cases are:"
  echo "$TEST_CASE_LIST"
  
else

# set defaults...
  ACTION=$1
  NAME=$2
  NP="1"

  if [ "$ACTION" = "run_mpi" ] ; then
# slightly different order of arguments, must include the number of processors to run on
# check that we have an integer number of processors requested  
    echo $2 | grep "[^0-9]" > /dev/null 2>&1

    if [ "$?" = "0" ] ; then

      # If the grep found something other than 0-9
      # then it's not an integer.
      echo "Sorry, wanted a number of processors to run on..."
      echo " "
      echo "For example to run the test on 4 processors use:"
      echo "run_automatic_test run_mpi  4 NAME"
      echo " "

      echo "Error, wanted a number of processors to run on" > ./progress
      exit 1
  
    else
    # The grep found only 0-9, so it's an integer. 
    
      ACTION="run"
      NP=$2
      NAME=$3

      RUN_COMMAND="$MPI_RUN_COMMAND $NP $EXECUTABLE_DIR/$MPI_SOLVER_NAME"
      SOLVER_NAME=$MPI_SOLVER_NAME
      
    fi
        
    if [ "$NP" = "1" ] ; then
      echo "Running using ${NP} processor"
    else
      echo "Running using ${NP} processors"    
    fi
    
    echo " "
    
  elif [ "$ACTION" = "run_seq" ] ; then
    
    ACTION="run"
    RUN_COMMAND="$SEQ_RUN_COMMAND $EXECUTABLE_DIR/$SEQ_SOLVER_NAME"
    SOLVER_NAME=$SEQ_SOLVER_NAME

  fi
    
  if [ "$NAME" ] ; then
    TEST_CASE_LIST=$NAME
  fi
  
  for TEST_CASE in $TEST_CASE_LIST
  do

# get the run_name 
     cd PROBLEM_SPECIFICATION_FILES
     
     NUMBER_OF_INPUT_FILES=$(ls *.inp | wc -l)
     
     if [ $NUMBER_OF_INPUT_FILES != 1 ] ; then
       echo " Error: More than one input file found:"
       ls *.inp
       echo ""
       cd ..
       echo " Error: More than one input file found" > ./progress
       exit 1
     fi
     
     RUN_FILE_NAME=$(ls *.inp)
     
     cd ..
     RUN_NAME=${RUN_FILE_NAME%\.*}
     echo "TEST_CASE:${TEST_CASE}  RUN_NAME:${RUN_NAME} ACTION:$ACTION"
     
     PROGRESS_FILENAME='progress'
     
     if [ "$ACTION" = "run" ] ; then

# clean any existing problem specification files   
       rm -f $CLEANING_LIST
# clean any existing output files     
       rm -f $RUN_NAME.*
       
       echo "$RUN_NAME" > run_name.txt

       echo "{
              s/MATERIAL_DIRECTORY/${MATERIAL_DIRECTORY}/g
              s/CABLE_DIRECTORY/${CABLE_DIRECTORY}/g
	      " > sed_command
# Add any parameter substitutions specified to the sed command

       rm -f derived_parameters.txt
       touch derived_parameters.txt
       
# Read the parameter name and value from the file line by line
       while IFS== read  PARAMETER VALUE
       do           

# This process allows the substitution of random values specified by a min and max value       
         TEST_STRING="URANDOM"
         if test "${VALUE#*$TEST_STRING}" != "$VALUE" ; then
	   	   
	   echo "1" > GGI_TLM_generate_random_numbers_in.txt	   
	   
	   echo $VALUE | sed  "s/URANDOM//g" >> GGI_TLM_generate_random_numbers_in.txt
	   echo "y
random_number.dat" >> GGI_TLM_generate_random_numbers_in.txt	   
	   $EXECUTABLE_DIR/GGI_TLM_generate_random_numbers < GGI_TLM_generate_random_numbers_in.txt
	   
	   VALUE=$($EXECUTABLE_DIR/GGI_TLM_generate_random_numbers < GGI_TLM_generate_random_numbers_in.txt)
	   
	   read VALUE < random_number.dat
	   
	 fi
         
# This process searches for a square bracket indicating an expression or derived parameter
         TEST_STRING="["
         if test "${VALUE#*$TEST_STRING}" != "$VALUE" ; then
              
#           echo "Found derived value: $VALUE"  
# add derived value to the derived parameter list
       
           echo "${PARAMETER}=${VALUE}" >> derived_parameters.txt
    
         else
         
# add line to sed command        
           echo "s/${PARAMETER}/${VALUE}/g" >> sed_command
          
         fi
        
       done < PROBLEM_SPECIFICATION_FILES/parameter_definition.dat
       
       echo "	      }" >> sed_command
       
# Apply the sed command to the derived parameters list

       sed -i -f sed_command derived_parameters.txt
       
#       echo "Derived parameters:"
#       echo "______________________________________"       
#       cat derived_parameters.txt
       
# Loop through the derived parameter list evaluating the derived parameters

       echo "{" > sed_command2
       
       while IFS== read  PARAMETER VALUE
       do           
       
# strip the square brackets from the value to give an arithmetic expression

         a=$( echo $VALUE | sed  -e 's/\[//g' -e 's/\]//g')
         echo expression: $a
# evaluate the expression using awk

         echo $PARAMETER | awk 'BEGIN {result='$a'}{printf"'$PARAMETER'=%e \n",result}'
         RESULT_VALUE=$( echo '' | awk 'BEGIN {result='$a'}{printf"%e \n",result}' )
# add line to sed command
         echo "s/${PARAMETER}/${RESULT_VALUE}/g" >> sed_command2
                            
       done < derived_parameters.txt
       echo "}" >> sed_command2
            
# Apply the intial sed command to the input file
       sed -f sed_command PROBLEM_SPECIFICATION_FILES/$RUN_NAME.inp > ./$RUN_NAME.inp

# Apply the derived parameter sed command to the input file
       sed -i -f sed_command2 ./$RUN_NAME.inp       

# copy input file and all material, cable and mode files to the run directory
       
       cp PROBLEM_SPECIFICATION_FILES/*.vmat .
       cp PROBLEM_SPECIFICATION_FILES/*.smat . 
       cp PROBLEM_SPECIFICATION_FILES/*.cable .
       cp PROBLEM_SPECIFICATION_FILES/*.mode .
       cp PROBLEM_SPECIFICATION_FILES/*.cir .

# copy any additional files required which may not be specified in a standard format
       
       $COPY_COMMAND
    
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_model_builder < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_model_builder" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_model_builder"
         exit 1
       fi
#       
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_cable_model_builder < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_cable_model_builder" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_cable_model_builder"
         exit 1
       fi
#       
       echo "RUNNING: $RUN_COMMAND"
       $RUN_COMMAND < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: $SOLVER_NAME"
         exit 1
       fi
#       

       sleep 1s
       
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_post_process < PROBLEM_SPECIFICATION_FILES/GGI_TLM_post_process_in.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_post_process" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_post_process"
         exit 1
       fi
#              
     elif [ "$ACTION" = "post_process" ] ; then
       
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_post_process < PROBLEM_SPECIFICATION_FILES/GGI_TLM_post_process_in.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_post_process" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_post_process"
         exit 1
       fi
             
     elif [ "$ACTION" = "clean" ] ; then

# clean any existing problem specification files   
       rm -f $CLEANING_LIST
# clean any existing output files     
       rm -f $RUN_NAME.*
             
     elif [ "$ACTION" = "clean_vtk" ] ; then

# clean any vtk files
       rm -f *vtk*
             
     elif [ "$ACTION" = "clean_all" ] ; then

# clean any existing problem specification files   
       rm -f $CLEANING_LIST
# clean any existing output files     
       rm -f $RUN_NAME.*
# remove the RESULTS_TAG directories i.e. any saved results
       rm -rf RESULTS_*
    
     elif [ "$ACTION" = "plot" ] ; then
     
       echo "{
              s/#PAUSE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result.plt > plot_result.plt
       
       gnuplot plot_result.plt
      
       RETURN_CODE=$?
       if [[ $RETURN_CODE != 0 ]] ; then
         echo "$TEST_CASE: Exit from plot" >> progress
	 exit 1
       fi
       
       echo "FINISHED: $TEST_CASE: plot" > ./progress
    
     elif [ "$ACTION" = "plot_jpg" ] ; then
     
       echo "{
              s/#JPG/ /g
              s/#OUTPUT_TO_FILE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result.plt > plot_result.plt
       
       gnuplot plot_result.plt
       
       echo "FINISHED: $TEST_CASE: plot_jpg" > ./progress
       
     elif [ "$ACTION" = "plot_ref" ] ; then
     
       echo "{
              s/#PAUSE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result_with_reference.plt > plot_result_with_reference.plt
       
       gnuplot plot_result_with_reference.plt
      
       RETURN_CODE=$?
       if [[ $RETURN_CODE != 0 ]] ; then
         echo "$TEST_CASE: Exit from plot_ref" >> progress
	 exit 1
       fi
       
       echo "FINISHED: $TEST_CASE: plot_ref" > ./progress
       
     elif [ "$ACTION" = "plot_ref_jpg" ] ; then
           
       echo "{
              s/#JPG/ /g
              s/#OUTPUT_TO_FILE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result_with_reference.plt > plot_result_with_reference.plt
       
       gnuplot plot_result_with_reference.plt
       
       echo "FINISHED: $TEST_CASE: plot_ref_jpg" > ./progress
      
     elif [ "$ACTION" = "reference" ] ; then
     
       source PROBLEM_SPECIFICATION_FILES/create_reference_result       
       
       echo "FINISHED: $TEST_CASE: reference" > ./progress
      
     elif [ "$ACTION" = "check_reference" ] ; then
     
# find all the files in the  PROBLEM_SPECIFICATION_FILES  directory ending in _ref. These are the reference files to check

      FILE_LIST=$( find ./PROBLEM_SPECIFICATION_FILES/ -name "*_ref" )

      echo $FILE_LIST
  
      FILE_NUMBER=0
# Check tests whether ANY of the files differ
      CHECK="OK"
# Check2 tests whether ANY of the files are the same
      CHECK2="FAILED"

# loop over the list of reference files  
      for REFERENCE_FILE in $FILE_LIST
      do
   
        NEW_FILE=$( basename $REFERENCE_FILE _ref )
 
# check that the file exists - some test cases re-name files when copying reference results...
        if [ -s $NEW_FILE ]; then

          FILE_NUMBER=$((FILE_NUMBER+1))

# Strip the directory name and _ref from the reference filename to give the current filename 
          echo "checking files:
          $REFERENCE_FILE
	  $NEW_FILE "
  
          cmp "$REFERENCE_FILE" "$NEW_FILE"
  
          RETURN_CODE=$?
  
          if [[ $RETURN_CODE == 0 ]] 
          then
            echo "PASSED CHECK"   
            CHECK2="OK"
          else
            echo "***FAILED CHECK***"
            CHECK="FAILED"
          fi   

        fi

      done
      
      if [ "$FILE_NUMBER" == "0"  ] ; then
        echo "$TEST_CASE: Warning: no files checked " > ./progress
        echo "$TEST_CASE: Warning: no files checked "
      
      else

# check the reference file against the file in the run directory with the same name (minus _ref) 

        if [ "$CHECK" == "OK"  ] ; then
          echo "$TEST_CASE: Checked $FILE_NUMBER files: ALL RESULTS ARE EQUAL TO REFERENCE" > ./progress
          echo "$TEST_CASE: Checked $FILE_NUMBER files: ALL RESULTS ARE EQUAL TO REFERENCE"
        else
          if [ "$CHECK2" == "OK"  ] ; then
            echo "$TEST_CASE: Checked $FILE_NUMBER files: AT LEAST ONE RESULT NOT EQUAL TO REFERENCE*" > ./progress
            echo "$TEST_CASE: Checked $FILE_NUMBER files: AT LEAST ONE RESULT NOT EQUAL TO REFERENCE*"
	  else
            echo "******$TEST_CASE: Checked $FILE_NUMBER files: NO RESULTS ARE EQUAL TO REFERENCE******" > ./progress
            echo "******$TEST_CASE: Checked $FILE_NUMBER files: NO RESULTS ARE EQUAL TO REFERENCE******"
	  fi
        fi
	
      fi
             
     elif [ "$ACTION" = "view_geometry" ] ; then
#       
#   Check and plot geometry
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_geometry_checks < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_geometry_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_geometry_checks"
         exit 1
       fi
# Run paraview with a startup python script to load the volume, surface, line and point geometry files

       echo "STARTING PARAVIEW....."
     
       if [ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]; then
    
         paraview --script=c:/cygwin64/${SRC_DIR}/GGI_TLM_view_geometry.py &
	 
       else
    
         paraview --script=${SRC_DIR}/GGI_TLM_view_geometry.py &

       fi     
       
       echo "FINISHED: $TEST_CASE: view_geometry" > ./progress
             
     elif [ "$ACTION" = "view_meshed_geometry" ] ; then
#       
#   Check and plot the meshed geometry
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_model_checks < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_model_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_model_checks"
         exit 1
       fi
# Run paraview with a startup python script to load the volume, surface, line and point geometry files
     
       echo " "
       echo "STARTING PARAVIEW....."
       echo " "
     
       if [ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]; then
    
         paraview --script=c:/cygwin64/${SRC_DIR}/GGI_TLM_view_meshed_geometry.py &
	 
       else
    
         paraview --script=${SRC_DIR}/GGI_TLM_view_meshed_geometry.py &

       fi     
       
       echo "FINISHED: $TEST_CASE: view_geometry" > ./progress
             
     elif [ "$ACTION" = "view_mesh" ] ; then
#
#   Check and plot materials
       echo "$RUN_NAME
2      ! View volume material cells
0      ! All materials
4      ! View surface material faces
0      ! All materials
0      ! exit
" > temp.txt
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_material_model_checks < temp.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_material_model_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_material_model_checks"
         exit 1
       fi
#
#   Check and plot cables
       echo "$RUN_NAME
2      ! View cable routes (segment based)
0      ! All cables
0      ! exit
" > temp.txt
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_cable_model_checks < temp.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_cable_model_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_cable_model_checks"
         exit 1
       fi
# Run paraview with a startup python script to load the volume material, surface material and cable mesh geometry files
     
       echo " "
       echo "STARTING PARAVIEW....."
       echo " "

       if [ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]; then
    
         paraview --script=c:/cygwin64/${SRC_DIR}/GGI_TLM_view_mesh.py &
	 
       else
    
         paraview --script=${SRC_DIR}/GGI_TLM_view_mesh.py &

       fi     
            
       echo "FINISHED: $TEST_CASE: view_mesh" > ./progress
             
     elif [ "$ACTION" = "document" ] ; then
       
#   Check and plot geometry
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_geometry_checks < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_geometry_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_geometry_checks"
         exit 1
       fi
       
#   Check and plot the meshed geometry
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_model_checks < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_model_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_model_checks"
         exit 1
       fi

#   Check and plot materials
       echo "$RUN_NAME
2      ! View volume material cells
0      ! All materials
4      ! View surface material faces
0      ! All materials
0      ! exit
" > temp.txt
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_material_model_checks < temp.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_material_model_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_material_model_checks"
         exit 1
       fi
#
#   Check and plot cables
       echo "$RUN_NAME
2      ! View cable routes (segment based)
0      ! All cables
0      ! exit
" > temp.txt
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_cable_model_checks < temp.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_cable_model_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_cable_model_checks"
         exit 1
       fi

# Run python script to create the document
    
       if [ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]; then
    
         pvpython c:/cygwin64${SRC_DIR}/GGI_TLM_document.py
	 
       else
    
         pvpython ${SRC_DIR}/GGI_TLM_document.py

       fi     

       echo "FINISHED: $TEST_CASE: document" > ./progress
      
     elif [ "$ACTION" = "save" ] ; then

       TAG=$3
       
# check whether the RESULTS_$TAG directory exists and create it if it doesn't      
       if [ ! -d "RESULTS_$TAG" ]; then
  
         mkdir RESULTS_$TAG
  
       fi
 
# copy result files with tag to the RESUTLS directory
# The results files to save are the same as those saved as reference results in the create_reference_result process

# create a copy results process from the  PROBLEM_SPECIFICATION_FILES/create_reference_result  script
     
       echo "{
              s/PROBLEM_SPECIFICATION_FILES/RESULTS_$TAG/g
              s/_ref/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/create_reference_result > save_result
       
       source save_result

# copy additional results to the RESUTLS directory i.e. the .inp file, .info file and .rtf file (if it exists)

       cp *.inp  RESULTS_$TAG
       cp *.info RESULTS_$TAG
       cp *.rtf  RESULTS_$TAG
                                 
       echo "FINISHED: $TEST_CASE: save" > ./progress
      
     elif [ "$ACTION" = "set_permissions" ] ; then
     
       chmod +x ./run_automatic_test
       chmod +x ./PROBLEM_SPECIFICATION_FILES/create_reference_result

     else 
     
       echo "Unknown action: $ACTION"      
     
     fi

  done
      
fi

#exit 0  ! this messes up the PARAMETERISED_FSS test case and isn't really needed anyway I don't think CJS 21/2/2014

# we have some arguments to run_automatic_test




