## Some other tests...


## TEST WHETHER THE NUMBER OF ARGUMENTS IS AS REQUIRED (1 HERE)
if [ "$#" != "1" ] ; then

  echo "Error: expected 1 argument... "
  echo "Example:
useful_script_stuff test_argument"
       
  exit 1
  
else
## SET A VARIABLE TO BE EQUAL TO ONE OF THE ARGUMENTS (First arguemnt here)

  VAR=$1

  echo "Argument found :$VAR"

fi

## Some other tests...

#String_tests 		Description

string1 = string2 	True if strings are equal
string1 != string2 	True if the strings are not equal
-n string1 		True if the string is not null
-z string1 		True if the string is null

#Numeric_tests 		Description
number1 -eq number2 	True if the expressions are equal
number1 -ne number2 	True if the expressions are not equal

number1 -gt number2 	True if number1 is greater than number2
number1 -lt number2 	True if number1 is less than number2

number1 -ge number2 	True if number1 is greater than or equal to number2
number1 -le number2 	True if number1 is less than or equal to number1

#File_tests 		Description

-f file 		True if the provided string is a file
-s file 		True if the file has a non-zero size
-d file 		True if the file is a directory


## Some further if statements...
if [[ "$VAR" = "value_1" || "$VAR" = "value_2" ]] ; then
  exit 1
fi

## LOOP OVER A LIST

echo "Loop over a list"

LIST="
ELEMENT_1
ELEMENT_2
ELEMENT_3
$VAR
"
  
for PARAMETER in $LIST
do

  echo "PARAMETER=$PARAMETER "
  
done

## NUMERIC LOOP ##

echo "Numeric loop"
N_LOOPS=6

LOOP_NUMBER=1

while [ $LOOP_NUMBER -le $N_LOOPS ]
do
  echo "Loop number $LOOP_NUMBER of $NLOOPS"
  (( LOOP_NUMBER++ ))
done

## LOOP OVER DATA READ FROM A FILE
while read  P1 P2 P3 P4
do   

  echo "Parameters $P1 $P2 $P3 $P4"

done < data_file.dat       

## Read a line from a file
      
read LINE < filename

## write the output from a command to a file

echo "Test sending the result of a command to a file" > temp_file.txt

## Append the output from a command to a file

echo "Append this line to the file" >> temp_file.txt
     
## Number of files matching a pattern
NUMBER_OF_INPUT_FILES=$(ls *.inp | wc -l)

## sed command run using a file to specify the action

echo "{
       s/FILE_TEXT_1/REPLACEMENT_TEST_1/g
       s/FILE_TEXT_2/REPLACEMENT_TEST_2/g
       }" > sed_command
# run sed and create a new file with replaced text
sed -f sed_command ORIGINAL_FILE > NEW_FILE

# run sed and replace text in the original files
sed -i -f sed_command ORIGINAL_FILE 

# run sed with action in command line (here replace in original file)
sed -i s/OLD_TEXT/NEW_TEXT/g file.txt

# replace tabs with spaces in file and replace in the original file
sed -i 's/\t/    /g' file.txt

# multiple replacements
sed "s/#X11/$X11/g ; s/#X22/$X22/g" input_file_TEMPLATE.inp > input_file.inp

### Check the status of the process just finished
RETURN_CODE=$?        
PROCESS_NAME="process_name"
if [[ $RETURN_CODE != 0 ]] ; then
  
  echo "***** ${PROCESS_NAME} FAILED *****"
  exit 1
   
else

  echo "***** ${PROCESS_NAME} FINISHED CORRECTLY *****"     

fi

# read values from the last line of FILE into the variables f n re im mag magdb phase
      read -r f n re im mag magdb phase < <(tail -n1 FILE)

### Convert CSV files to txt by replacing commas with spaces

sed 's/,/\ /g' test_file.csv > test_file.txt

# Test whether a file exists
if [ -e mode_field_1.dat ]
then
   gnuplot field_plot.plt
fi

